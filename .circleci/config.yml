version: 2
jobs:
  build:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache: &restore_cache
          keys:
            - v1-{{ .Branch }}-
      - run:
          name: "Install setup.py"
          command: |
            python3.7 -m venv .venv;
            . .venv/bin/activate
            pip install -U pip
            pip install -e .[tests]

      - save_cache: &save_cache
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - ~/project/.venv
            - ~/.cache/pip

  lint:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache: &restore_cache
          keys:
            - v1-{{ .Branch }}-
      - run:
          name: "Check Linting"
          command: |
            . .venv/bin/activate
#            mypy docs/examples

  test:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache: &restore_cache
          keys:
            - v1-{{ .Branch }}-

      - run:
          name: "Run doctests"
          command: |
            . .venv/bin/activate
            # This should be done in tox, but i can't work out how to run doctests in tox hence we're also running it here for now.
#            pytest -v --doctest-modules

      - run:
          name: "Run all tests"
          command: |
            . .venv/bin/activate
#            pip install tox
#            tox --verbose

      - run:
          name: "Run all examples"
          command: |
            set -xe
            . .venv/bin/activate
#            for f in docs/examples/*.py; do cp -v -- "$f" "$f-example.py"; done
#            cp docs/examples/*-example.py .
#            for f in *-example.py; do python "$f"; done
#            rm docs/examples/*-example.py
#            rm *-example.py

      - run:
          name: "Confirm that the check_setup script works"
          command: |
            . .venv/bin/activate
#            python -m vortexasdk.check_setup

      - run:
          name: "Build docs"
          command: |
            . .venv/bin/activate
            mkdir -p ./_build/pydocmd/examples
            python docs/autogen.py
            pydocmd build

  check-release-version:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache: &restore_cache
          keys:
            - v1-{{ .Branch }}-
      - run:
          name: "Check proposed release version is valid next semver"
          command: |
            . .venv/bin/activate
            python scripts/validate_proposed_package_version.py

  deploy:
    working_directory: ~/project
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache: &restore_cache
          keys:
            - v1-{{ .Branch }}-
      - add_ssh_keys:
          fingerprints:
            - "b7:35:38:7a:76:62:44:82:28:93:77:f1:9c:f1:35:8c"
      - run:
          name: "Deploy docs if master branch"
          command: |
            . .venv/bin/activate
#            mkdir -p ./_build/pydocmd/examples
#            python docs/autogen.py
#            pydocmd build
#            pydocmd gh-deploy
      - run:
          name: "FAKE Deploy package to pypi"
          command: |
            . .venv/bin/activate
            echo Done

workflows:
  version: 2
  build-deploy:
    jobs:
      - build

      - lint:
          requires:
              - build

      - test:
          requires:
              - build

      - check-release-version:
          requires:
            - build

      - deploy:
          filters:
            branches:
              only:
                - ci-deployment-automation
          requires:
            - test
            - lint
            - check-release-version